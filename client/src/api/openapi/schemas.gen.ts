// This file is auto-generated by @hey-api/openapi-ts

export const $AuthSource = {
    type: 'string',
    enum: ['google'],
    nullable: false
} as const;

export const $IUser = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        email: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        authSource: {
            '$ref': '#/components/schemas/AuthSource'
        }
    },
    required: ['id', 'email', 'firstName', 'lastName', 'authSource'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IChallenge = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        author: {
            '$ref': '#/components/schemas/IUser'
        },
        series: {
            items: {
                '$ref': '#/components/schemas/IChallengeSeries'
            },
            type: 'array'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/IUser'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'author', 'series', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IChallengeSeries = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/IChallenge'
            },
            type: 'array'
        },
        author: {
            '$ref': '#/components/schemas/IUser'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/IUser'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'challenges', 'author', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $TokenPayload = {
    properties: {
        iss: {
            type: 'string',
            description: `The Issuer Identifier for the Issuer of the response. Always
https://accounts.google.com or accounts.google.com for Google ID tokens.`
        },
        at_hash: {
            type: 'string',
            description: `Access token hash. Provides validation that the access token is tied to the
identity token. If the ID token is issued with an access token in the
server flow, this is always included. This can be used as an alternate
mechanism to protect against cross-site request forgery attacks, but if you
follow Step 1 and Step 3 it is not necessary to verify the access token.`
        },
        email_verified: {
            type: 'boolean',
            description: "True if the user's e-mail address has been verified; otherwise false."
        },
        sub: {
            type: 'string',
            description: `An identifier for the user, unique among all Google accounts and never
reused. A Google account can have multiple emails at different points in
time, but the sub value is never changed. Use sub within your application
as the unique-identifier key for the user.`
        },
        azp: {
            type: 'string',
            description: `The client_id of the authorized presenter. This claim is only needed when
the party requesting the ID token is not the same as the audience of the ID
token. This may be the case at Google for hybrid apps where a web
application and Android app have a different client_id but share the same
project.`
        },
        email: {
            type: 'string',
            description: `The user's email address. This may not be unique and is not suitable for
use as a primary key. Provided only if your scope included the string
"email".`
        },
        profile: {
            type: 'string',
            description: `The URL of the user's profile page. Might be provided when:
- The request scope included the string "profile"
- The ID token is returned from a token refresh
- When profile claims are present, you can use them to update your app's
user records. Note that this claim is never guaranteed to be present.`
        },
        picture: {
            type: 'string',
            description: `The URL of the user's profile picture. Might be provided when:
- The request scope included the string "profile"
- The ID token is returned from a token refresh
- When picture claims are present, you can use them to update your app's
user records. Note that this claim is never guaranteed to be present.`
        },
        name: {
            type: 'string',
            description: `The user's full name, in a displayable form. Might be provided when:
- The request scope included the string "profile"
- The ID token is returned from a token refresh
- When name claims are present, you can use them to update your app's user
records. Note that this claim is never guaranteed to be present.`
        },
        given_name: {
            type: 'string',
            description: `The user's given name, in a displayable form. Might be provided when:
- The request scope included the string "profile"
- The ID token is returned from a token refresh
- When name claims are present, you can use them to update your app's user
records. Note that this claim is never guaranteed to be present.`
        },
        family_name: {
            type: 'string',
            description: `The user's family name, in a displayable form. Might be provided when:
- The request scope included the string "profile"
- The ID token is returned from a token refresh
- When name claims are present, you can use them to update your app's user
records. Note that this claim is never guaranteed to be present.`
        },
        aud: {
            type: 'string',
            description: `Identifies the audience that this ID token is intended for. It must be one
of the OAuth 2.0 client IDs of your application.`
        },
        iat: {
            type: 'number',
            format: 'double',
            description: `The time the ID token was issued, represented in Unix time (integer
seconds).`
        },
        exp: {
            type: 'number',
            format: 'double',
            description: 'The time the ID token expires, represented in Unix time (integer seconds).'
        },
        nonce: {
            type: 'string',
            description: `The value of the nonce supplied by your app in the authentication request.
You should enforce protection against replay attacks by ensuring it is
presented only once.`
        },
        hd: {
            type: 'string',
            description: `The hosted G Suite domain of the user. Provided only if the user belongs to
a hosted domain.`
        },
        locale: {
            type: 'string',
            description: `The user's locale, represented by a BCP 47 language tag.
Might be provided when a name claim is present.`
        }
    },
    required: ['iss', 'sub', 'aud', 'iat', 'exp'],
    type: 'object',
    additionalProperties: false
} as const;

export const $User = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        email: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        authSource: {
            '$ref': '#/components/schemas/AuthSource'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        challengeSeries: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        modifiedSeries: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        modifiedChallenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        },
        sessions: {
            items: {
                '$ref': '#/components/schemas/Session'
            },
            type: 'array'
        }
    },
    required: ['id', 'email', 'firstName', 'lastName', 'authSource', 'challenges', 'challengeSeries', 'modifiedSeries', 'modifiedChallenges', 'createdAt', 'updatedAt', 'deletedAt', 'sessions'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Challenge = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        series: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/User'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'author', 'series', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ChallengeSeries = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/User'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'challenges', 'author', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Session = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        token: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time'
        },
        expires_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'user', 'token', 'created_at', 'updated_at', 'expires_at'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IGoogleAuthRequestBody = {
    properties: {
        credential: {
            type: 'string'
        },
        client_id: {
            type: 'string'
        }
    },
    required: ['credential', 'client_id'],
    type: 'object',
    additionalProperties: false
} as const;
// This file is auto-generated by @hey-api/openapi-ts

export const $AuthSource = {
    type: 'string',
    enum: ['google'],
    nullable: false
} as const;

export const $IChallenge = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        author: {
            '$ref': '#/components/schemas/IUser'
        },
        owners: {
            items: {
                '$ref': '#/components/schemas/IUser'
            },
            type: 'array'
        },
        series: {
            items: {
                '$ref': '#/components/schemas/IChallengeSeries'
            },
            type: 'array'
        },
        category: {
            '$ref': '#/components/schemas/ICategory'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/IUser'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time',
            nullable: true
        },
        description: {
            type: 'string',
            nullable: true
        },
        difficultyExplanation: {
            type: 'string',
            nullable: true
        }
    },
    required: ['id', 'title', 'effortLevel', 'requiredExpertise', 'author', 'owners', 'series', 'category', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ICategory = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        name: {
            type: 'string'
        },
        parentCategory: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ICategory'
                }
            ],
            nullable: true
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/IChallenge'
            },
            type: 'array'
        },
        challengeSeries: {
            items: {
                '$ref': '#/components/schemas/IChallengeSeries'
            },
            type: 'array'
        },
        childrenCategories: {
            items: {
                '$ref': '#/components/schemas/ICategory'
            },
            type: 'array'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'name', 'parentCategory', 'challenges', 'challengeSeries', 'childrenCategories', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IChallengeSeries = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        difficultyExplanation: {
            type: 'string'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/IChallenge'
            },
            type: 'array'
        },
        category: {
            '$ref': '#/components/schemas/ICategory'
        },
        author: {
            '$ref': '#/components/schemas/IUser'
        },
        owners: {
            items: {
                '$ref': '#/components/schemas/IUser'
            },
            type: 'array'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/IUser'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'effortLevel', 'requiredExpertise', 'difficultyExplanation', 'challenges', 'category', 'author', 'owners', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IUser = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        email: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        authSource: {
            '$ref': '#/components/schemas/AuthSource'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/IChallenge'
            },
            type: 'array'
        },
        challengeSeries: {
            items: {
                '$ref': '#/components/schemas/IChallengeSeries'
            },
            type: 'array'
        }
    },
    required: ['id', 'email', 'firstName', 'lastName', 'authSource', 'challenges', 'challengeSeries'],
    type: 'object',
    additionalProperties: false
} as const;

export const $CreateChallengeValidationSchema = {
    properties: {
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        seriesId: {
            type: 'number',
            format: 'double'
        },
        categoryId: {
            type: 'number',
            format: 'double'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        difficultyExplanation: {
            type: 'string'
        }
    },
    required: ['title', 'description', 'categoryId', 'effortLevel', 'requiredExpertise'],
    type: 'object',
    additionalProperties: false
} as const;

export const $CreateChallengeSeriesValidationSchema = {
    properties: {
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        categoryId: {
            type: 'number',
            format: 'double'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        difficultyExplanation: {
            type: 'string'
        }
    },
    required: ['title', 'description', 'categoryId', 'effortLevel', 'requiredExpertise'],
    type: 'object',
    additionalProperties: false
} as const;

export const $User = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        email: {
            type: 'string'
        },
        firstName: {
            type: 'string'
        },
        lastName: {
            type: 'string'
        },
        authSource: {
            '$ref': '#/components/schemas/AuthSource'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        challengeSeries: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        modifiedSeries: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        modifiedChallenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        },
        sessions: {
            items: {
                '$ref': '#/components/schemas/Session'
            },
            type: 'array'
        }
    },
    required: ['id', 'email', 'firstName', 'lastName', 'authSource', 'challenges', 'challengeSeries', 'modifiedSeries', 'modifiedChallenges', 'createdAt', 'updatedAt', 'deletedAt', 'sessions'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Challenge = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        owners: {
            items: {
                '$ref': '#/components/schemas/User'
            },
            type: 'array'
        },
        series: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        category: {
            '$ref': '#/components/schemas/Category'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/User'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        },
        description: {
            type: 'string'
        },
        difficultyExplanation: {
            type: 'string'
        }
    },
    required: ['id', 'title', 'effortLevel', 'requiredExpertise', 'author', 'owners', 'series', 'category', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt', 'description', 'difficultyExplanation', 'deletedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Category = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        name: {
            type: 'string'
        },
        parentCategory: {
            allOf: [
                {
                    '$ref': '#/components/schemas/Category'
                }
            ],
            nullable: true
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        challengeSeries: {
            items: {
                '$ref': '#/components/schemas/ChallengeSeries'
            },
            type: 'array'
        },
        childrenCategories: {
            items: {
                '$ref': '#/components/schemas/Category'
            },
            type: 'array'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'name', 'parentCategory', 'challenges', 'challengeSeries', 'childrenCategories', 'createdAt', 'updatedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ChallengeSeries = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        title: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        effortLevel: {
            type: 'number',
            enum: [1, 2, 3, 4, 5]
        },
        requiredExpertise: {
            type: 'number',
            enum: [0, 1, 2, 3]
        },
        difficultyExplanation: {
            type: 'string'
        },
        challenges: {
            items: {
                '$ref': '#/components/schemas/Challenge'
            },
            type: 'array'
        },
        category: {
            '$ref': '#/components/schemas/Category'
        },
        author: {
            '$ref': '#/components/schemas/User'
        },
        owners: {
            items: {
                '$ref': '#/components/schemas/User'
            },
            type: 'array'
        },
        version: {
            type: 'number',
            format: 'double'
        },
        versionCreatedAt: {
            type: 'string',
            format: 'date-time'
        },
        versionAuthor: {
            '$ref': '#/components/schemas/User'
        },
        createdAt: {
            type: 'string',
            format: 'date-time'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time'
        },
        deletedAt: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'title', 'description', 'effortLevel', 'requiredExpertise', 'difficultyExplanation', 'challenges', 'category', 'author', 'owners', 'version', 'versionCreatedAt', 'versionAuthor', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Session = {
    properties: {
        id: {
            type: 'number',
            format: 'double'
        },
        user: {
            '$ref': '#/components/schemas/User'
        },
        token: {
            type: 'string'
        },
        created_at: {
            type: 'string',
            format: 'date-time'
        },
        updated_at: {
            type: 'string',
            format: 'date-time'
        },
        expires_at: {
            type: 'string',
            format: 'date-time'
        }
    },
    required: ['id', 'user', 'token', 'created_at', 'updated_at', 'expires_at'],
    type: 'object',
    additionalProperties: false
} as const;

export const $IGoogleAuthRequestBody = {
    properties: {
        credential: {
            type: 'string'
        },
        client_id: {
            type: 'string'
        }
    },
    required: ['credential', 'client_id'],
    type: 'object',
    additionalProperties: false
} as const;